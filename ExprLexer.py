# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,151,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,4,24,
        139,8,24,11,24,12,24,140,1,25,4,25,144,8,25,11,25,12,25,145,1,26,
        1,26,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,3,2,0,10,10,13,13,1,0,
        48,57,3,0,9,10,13,13,32,32,152,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,
        3,57,1,0,0,0,5,59,1,0,0,0,7,62,1,0,0,0,9,68,1,0,0,0,11,73,1,0,0,
        0,13,78,1,0,0,0,15,81,1,0,0,0,17,85,1,0,0,0,19,89,1,0,0,0,21,94,
        1,0,0,0,23,99,1,0,0,0,25,104,1,0,0,0,27,108,1,0,0,0,29,112,1,0,0,
        0,31,116,1,0,0,0,33,118,1,0,0,0,35,120,1,0,0,0,37,122,1,0,0,0,39,
        124,1,0,0,0,41,126,1,0,0,0,43,128,1,0,0,0,45,131,1,0,0,0,47,133,
        1,0,0,0,49,138,1,0,0,0,51,143,1,0,0,0,53,147,1,0,0,0,55,56,5,40,
        0,0,56,2,1,0,0,0,57,58,5,41,0,0,58,4,1,0,0,0,59,60,5,41,0,0,60,61,
        5,33,0,0,61,6,1,0,0,0,62,63,5,108,0,0,63,64,5,111,0,0,64,65,5,103,
        0,0,65,66,5,49,0,0,66,67,5,48,0,0,67,8,1,0,0,0,68,69,5,115,0,0,69,
        70,5,113,0,0,70,71,5,114,0,0,71,72,5,116,0,0,72,10,1,0,0,0,73,74,
        5,99,0,0,74,75,5,98,0,0,75,76,5,114,0,0,76,77,5,116,0,0,77,12,1,
        0,0,0,78,79,5,108,0,0,79,80,5,110,0,0,80,14,1,0,0,0,81,82,5,100,
        0,0,82,83,5,101,0,0,83,84,5,103,0,0,84,16,1,0,0,0,85,86,5,114,0,
        0,86,87,5,97,0,0,87,88,5,100,0,0,88,18,1,0,0,0,89,90,5,99,0,0,90,
        91,5,111,0,0,91,92,5,115,0,0,92,93,5,104,0,0,93,20,1,0,0,0,94,95,
        5,115,0,0,95,96,5,105,0,0,96,97,5,110,0,0,97,98,5,104,0,0,98,22,
        1,0,0,0,99,100,5,116,0,0,100,101,5,97,0,0,101,102,5,110,0,0,102,
        103,5,104,0,0,103,24,1,0,0,0,104,105,5,115,0,0,105,106,5,105,0,0,
        106,107,5,110,0,0,107,26,1,0,0,0,108,109,5,99,0,0,109,110,5,111,
        0,0,110,111,5,115,0,0,111,28,1,0,0,0,112,113,5,116,0,0,113,114,5,
        97,0,0,114,115,5,110,0,0,115,30,1,0,0,0,116,117,5,94,0,0,117,32,
        1,0,0,0,118,119,5,43,0,0,119,34,1,0,0,0,120,121,5,45,0,0,121,36,
        1,0,0,0,122,123,5,42,0,0,123,38,1,0,0,0,124,125,5,47,0,0,125,40,
        1,0,0,0,126,127,5,37,0,0,127,42,1,0,0,0,128,129,5,112,0,0,129,130,
        5,105,0,0,130,44,1,0,0,0,131,132,5,101,0,0,132,46,1,0,0,0,133,134,
        3,51,25,0,134,135,5,46,0,0,135,136,3,51,25,0,136,48,1,0,0,0,137,
        139,7,0,0,0,138,137,1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,
        141,1,0,0,0,141,50,1,0,0,0,142,144,7,1,0,0,143,142,1,0,0,0,144,145,
        1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,52,1,0,0,0,147,148,7,
        2,0,0,148,149,1,0,0,0,149,150,6,26,0,0,150,54,1,0,0,0,3,0,140,145,
        1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    LOG_BASE_10 = 4
    SQRT = 5
    CUBE_RT = 6
    NATURAL_LOG = 7
    TRIG_DEG = 8
    TRIG_RAD = 9
    TRIG_COSH = 10
    TRIG_SINH = 11
    TRIG_TANH = 12
    TRIG_SIN = 13
    TRIG_COS = 14
    TRIG_TAN = 15
    OP_POW = 16
    OP_ADD = 17
    OP_SUB = 18
    OP_MUL = 19
    OP_DIV = 20
    OP_MOD = 21
    PI = 22
    EULER = 23
    DEC = 24
    NEWLINE = 25
    INT = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "')!'", "'log10'", "'sqrt'", "'cbrt'", "'ln'", 
            "'deg'", "'rad'", "'cosh'", "'sinh'", "'tanh'", "'sin'", "'cos'", 
            "'tan'", "'^'", "'+'", "'-'", "'*'", "'/'", "'%'", "'pi'", "'e'" ]

    symbolicNames = [ "<INVALID>",
            "LOG_BASE_10", "SQRT", "CUBE_RT", "NATURAL_LOG", "TRIG_DEG", 
            "TRIG_RAD", "TRIG_COSH", "TRIG_SINH", "TRIG_TANH", "TRIG_SIN", 
            "TRIG_COS", "TRIG_TAN", "OP_POW", "OP_ADD", "OP_SUB", "OP_MUL", 
            "OP_DIV", "OP_MOD", "PI", "EULER", "DEC", "NEWLINE", "INT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "LOG_BASE_10", "SQRT", "CUBE_RT", 
                  "NATURAL_LOG", "TRIG_DEG", "TRIG_RAD", "TRIG_COSH", "TRIG_SINH", 
                  "TRIG_TANH", "TRIG_SIN", "TRIG_COS", "TRIG_TAN", "OP_POW", 
                  "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_MOD", "PI", 
                  "EULER", "DEC", "NEWLINE", "INT", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


